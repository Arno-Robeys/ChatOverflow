/**
 * @swagger
 * components:
 *   schemas:
 *     Chat:
 *       type: object
 *       required:
 *         - chatid
 *         - users
 *
 *       properties:
 *         chatid:
 *           type: integer
 *           description: The autogenerated ID of the user.
 *         users:
 *           type: Array
 *           description: The users in the chat.
 *
 */
import express from "express";
import { Chat } from "../domain/model/chat";
import chatService from "../service/chat.service";
const router = express.Router();


/**
 * @swagger
 * tags:
 *  name: Chats
 *  description: The chat managing API
 */

/**
 * @swagger
 * /chat:
 *   get:
 *     summary: Returns all chats
 *     tags: [Chats]
 *     responses:
 *       200:
 *         description: A list of chats
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Notification'
 *       500:
 *         description: Internal server error
 */

router.get("/", async (req, res) => {
    try {
        const messages = await chatService.getAllChats();
        res.status(200).json(messages)
    } catch(error) {
        res.status(500).json({status: 'error', errorMessage: error.message})
    }
})

/**
 * @swagger
 * /chat/create:
 *   post:
 *     summary: Returns created chat
 *     tags: [Chats]
 *     requestBody:
 *       description: create chat
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               user1:
 *                 type: Integer
 *                 example: 1
 *               user2:
 *                 type: Integer
 *                 example: 7
 *     responses:
 *       200:
 *         description: A chat
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Notification'
 *       500:
 *         description: Internal server error
 */

router.post("/create", async (req, res) => {
    try {
        const messages = await chatService.createChat(req.body.user1, req.body.user2);
        res.status(200).json(messages)
    } catch(error) {
        res.status(500).json({status: 'error', errorMessage: error.message})
    }
})

export default router;