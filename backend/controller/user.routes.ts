/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - firstname
 *         - lastname
 *         - email
 *         - password
 *
 *       properties:
 *         userid:
 *           type: integer
 *           description: The autogenerated ID of the user.
 *         firstname:
 *           type: string
 *           description: The first name of the user.
 *         lastname:
 *           type: string
 *           description: The last name of the user.
 *         email:
 *           type: string
 *           description: The email of the user.
 *         password:
 *           type: string
 *           description: The password of the user.
 *         nickname:
 *           type: string
 *           description: The nickname of the user.
 *
 *   parameters:
 *     userId:
 *       name: id
 *       in: path
 *       description: ID of the user to get or update
 *       required: true
 *       schema:
 *         type: integer
 *         format: int64
 *
 * tags:
 *  name: Users
 *  description: The users managing API
 */
import express from "express";
import userService from "../service/user.service";
const router = express.Router();


/**
 * @swagger
 * tags:
 *  name: Users
 *  description: The users managing API
 */

/**
 * @swagger
 * /user:
 *   get:
 *     summary: Returns all users
 *     tags: [users]
 *     responses:
 *       200:
 *         description: A list of users
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/User'
 *       500:
 *         description: Internal server error
 */

router.get("/", async (req, res) => {
    try {
        const users = await userService.getAllUsers();
        res.status(200).json(users)
    } catch(error) {
        res.status(500).json({status: 'error', errorMessage: error.message})
    }
})

export default router